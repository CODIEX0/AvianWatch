Index: app/src/main/java/com/example/avianwatch/objects/FirebaseManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.avianwatch.objects\r\n\r\nimport android.util.Log\r\nimport com.example.avianwatch.data.BirdObservation\r\nimport com.example.avianwatch.data.Post\r\nimport com.example.avianwatch.data.User\r\nimport com.google.firebase.database.DataSnapshot\r\nimport com.google.firebase.database.DatabaseError\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport com.google.firebase.database.ValueEventListener\r\n\r\nobject FirebaseManager {\r\n    // Collection names in the Firebase database\r\n    private const val POSTS_COLLECTION = \"Post\"\r\n    private const val OBSERVATION_COLLECTION = \"BirdObservation\"\r\n    private const val PREFERENCES_COLLECTION = \"UserPreferences\"\r\n    private const val USERS_COLLECTION = \"User\"\r\n\r\n    //posts\r\n    fun getPosts(uid: String, callback: (MutableList<Post>) -> Unit) {\r\n        val posts = mutableListOf<Post>()\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val postRef = database.getReference(POSTS_COLLECTION)\r\n\r\n        // Query the posts based on the specified UID\r\n        postRef.orderByChild(\"uid\").equalTo(uid)\r\n            .addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                    // Iterate over the retrieved data snapshots\r\n                    for (snapshot in dataSnapshot.children) {\r\n                        // Retrieve the post object from the snapshot\r\n                        val post = snapshot.getValue(Post::class.java)\r\n                        post?.let {\r\n                            // Add the post to the listcodie@gmail.com\r\n                            posts.add(it)\r\n                        }\r\n                    }\r\n                    // Invoke the callback function with the retrieved posts\r\n                    callback(posts)\r\n                }\r\n\r\n                override fun onCancelled(databaseError: DatabaseError) {\r\n                    // Handle the error\r\n                    callback(mutableListOf()) // Pass an empty list in case of error\r\n                }\r\n            })\r\n    }\r\n\r\n    fun getAllPosts(callback: (MutableList<Post>) -> Unit) {\r\n        val posts = mutableListOf<Post>()\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val postRef = database.getReference(POSTS_COLLECTION)\r\n\r\n        // Query all posts\r\n        postRef.addListenerForSingleValueEvent(object : ValueEventListener {\r\n            override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                // Iterate over the retrieved data snapshots\r\n                for (snapshot in dataSnapshot.children) {\r\n                    // Retrieve the post object from the snapshot\r\n                    val post = snapshot.getValue(Post::class.java)\r\n                    post?.let {\r\n                        // Add the post to the list\r\n                        posts.add(it)\r\n                    }\r\n                }\r\n                // Invoke the callback function with the retrieved posts\r\n                callback(posts)\r\n            }\r\n\r\n            override fun onCancelled(databaseError: DatabaseError) {\r\n                // Handle the error\r\n                callback(mutableListOf()) // Pass an empty list in case of error\r\n            }\r\n        })\r\n    }\r\n\r\n    fun addPost(post: Post, callback: (Boolean) -> Unit) {\r\n        val database = FirebaseDatabase.getInstance()\r\n        val postRef = database.getReference(POSTS_COLLECTION)\r\n\r\n        // get the current user's id\r\n        val id = Global.currentUser!!.uid\r\n\r\n        // Add the post to the Firebase database using the id\r\n        if (id != null) {\r\n            postRef.child(id).setValue(post)\r\n                .addOnSuccessListener {\r\n                    // post added successfully\r\n                    callback(true) // Invoke the success callback\r\n                }\r\n                .addOnFailureListener { exception ->\r\n                    // Error occurred while adding the post\r\n                    //Do something with exception...\r\n                    callback(false) // Invoke the failure callback\r\n                }\r\n        } else {\r\n            callback(false) // Invoke the failure callback if id is null\r\n        }\r\n    }\r\n\r\n    //likes\r\n    fun updateLikes(likes: Int, callback: (Boolean) -> Unit) {\r\n        val database = FirebaseDatabase.getInstance()\r\n        val postRef = database.getReference(POSTS_COLLECTION)\r\n\r\n        val id = Global.currentUser!!.uid\r\n\r\n        // Add the like to the Firebase database using the generated ID\r\n        if (id != null) {\r\n            val likesRef = postRef.child(id).child(\"likes\")\r\n            likesRef.setValue(likes)\r\n                .addOnSuccessListener {\r\n                    // likes updated successfully\r\n                    callback(true) // Invoke the success callback\r\n                }\r\n                .addOnFailureListener { exception ->\r\n                    // Error occurred while updating the likes\r\n                    //Do something with exception...\r\n                    callback(false) // Invoke the failure callback\r\n                }\r\n        } else {\r\n            callback(false) // Invoke the failure callback if like null\r\n        }\r\n    }\r\n\r\n    //usernames\r\n    fun getUserName(uid: String, callback: (String) -> Unit) {\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val userRef = database.getReference(USERS_COLLECTION)\r\n\r\n        val usernameRef = userRef.child(uid).child(\"username\")\r\n\r\n        // Query the workcoins based on the specified UID\r\n        usernameRef.addValueEventListener(object : ValueEventListener {\r\n            override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n\r\n                val username: String = dataSnapshot.value.toString()\r\n\r\n                if(username!=null){\r\n                    callback(username)\r\n                }\r\n            }\r\n\r\n            override fun onCancelled(databaseError: DatabaseError) {\r\n                // Handle the error\r\n                callback(10.toString()) // Invoke the failure callback\r\n                // Failed to read the value\r\n                Log.d(\"Failed to read the value\",\"Error: ${databaseError.message}\")\r\n            }\r\n        })\r\n    }\r\n\r\n    //users\r\n    fun getUsers(uid: String, callback: (MutableList<User>) -> Unit) {\r\n        val users = mutableListOf<User>()\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val userRef = database.getReference(USERS_COLLECTION)\r\n\r\n        // Query the users based on the specified UID\r\n        userRef.orderByChild(\"uid\").equalTo(uid)\r\n            .addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                    // Iterate over the retrieved data snapshots\r\n                    for (snapshot in dataSnapshot.children) {\r\n                        // Retrieve the user object from the snapshot\r\n                        val user = snapshot.getValue(User::class.java)\r\n                        user?.let {\r\n                            // Add the user to the list\r\n                            users.add(it)\r\n                        }\r\n                    }\r\n                    // Invoke the callback function with the retrieved users\r\n                    callback(users)\r\n                }\r\n\r\n                override fun onCancelled(databaseError: DatabaseError) {\r\n                    // Handle the error\r\n                    callback(mutableListOf()) // Pass an empty list in case of error\r\n                }\r\n            })\r\n    }\r\n\r\n    //observations\r\n    fun getObservations(uid: String, callback: (MutableList<BirdObservation>) -> Unit) {\r\n        val observations = mutableListOf<BirdObservation>()\r\n\r\n        val database = FirebaseDatabase.getInstance()\r\n        val observationRef = database.getReference(OBSERVATION_COLLECTION)\r\n\r\n        // Query the observations based on the specified UID\r\n        observationRef.orderByChild(\"uid\").equalTo(uid)\r\n            .addListenerForSingleValueEvent(object : ValueEventListener {\r\n                override fun onDataChange(dataSnapshot: DataSnapshot) {\r\n                    // Iterate over the retrieved data snapshots\r\n                    for (snapshot in dataSnapshot.children) {\r\n                        // Retrieve the observation object from the snapshot\r\n                        val observation = snapshot.getValue(BirdObservation::class.java)\r\n                        observation?.let {\r\n                            // Add the observation to the list\r\n                            observations.add(it)\r\n                        }\r\n                    }\r\n                    // Invoke the callback function with the retrieved posts\r\n                    callback(observations)\r\n                }\r\n\r\n                override fun onCancelled(databaseError: DatabaseError) {\r\n                    // Handle the error\r\n                    callback(mutableListOf()) // Pass an empty list in case of error\r\n                }\r\n            })\r\n    }\r\n    fun addObservation(observation: BirdObservation, callback: (Boolean) -> Unit) {\r\n        val database = FirebaseDatabase.getInstance()\r\n        val observationRef = database.getReference(OBSERVATION_COLLECTION)\r\n\r\n        // get the current user's id\r\n        val id = Global.currentUser!!.uid\r\n\r\n        // Add the observation to the Firebase database using the id\r\n        if (id != null) {\r\n            observationRef.child(id).setValue(observation)\r\n                .addOnSuccessListener {\r\n                    // post added successfully\r\n                    callback(true) // Invoke the success callback\r\n                }\r\n                .addOnFailureListener { exception ->\r\n                    // Error occurred while adding the post\r\n                    //Do something with exception...\r\n                    callback(false) // Invoke the failure callback\r\n                }\r\n        } else {\r\n            callback(false) // Invoke the failure callback if id is null\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/avianwatch/objects/FirebaseManager.kt b/app/src/main/java/com/example/avianwatch/objects/FirebaseManager.kt
--- a/app/src/main/java/com/example/avianwatch/objects/FirebaseManager.kt	(revision 07885d883bccddf9e12dcc4fa3c85fa81e440b1f)
+++ b/app/src/main/java/com/example/avianwatch/objects/FirebaseManager.kt	(date 1697565508450)
@@ -192,8 +192,7 @@
         val observationRef = database.getReference(OBSERVATION_COLLECTION)
 
         // Query the observations based on the specified UID
-        observationRef.orderByChild("uid").equalTo(uid)
-            .addListenerForSingleValueEvent(object : ValueEventListener {
+        observationRef.addListenerForSingleValueEvent(object : ValueEventListener {
                 override fun onDataChange(dataSnapshot: DataSnapshot) {
                     // Iterate over the retrieved data snapshots
                     for (snapshot in dataSnapshot.children) {
@@ -223,7 +222,7 @@
 
         // Add the observation to the Firebase database using the id
         if (id != null) {
-            observationRef.child(id).setValue(observation)
+            observationRef.child(observation.oid.toString()).setValue(observation)
                 .addOnSuccessListener {
                     // post added successfully
                     callback(true) // Invoke the success callback
Index: app/src/main/res/drawable/baseline_refresh_24.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><vector android:height=\"24dp\" android:tint=\"#000000\"\r\n    android:viewportHeight=\"24\" android:viewportWidth=\"24\"\r\n    android:width=\"24dp\" xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <path android:fillColor=\"@android:color/white\" android:pathData=\"M17.65,6.35C16.2,4.9 14.21,4 12,4c-4.42,0 -7.99,3.58 -7.99,8s3.57,8 7.99,8c3.73,0 6.84,-2.55 7.73,-6h-2.08c-0.82,2.33 -3.04,4 -5.65,4 -3.31,0 -6,-2.69 -6,-6s2.69,-6 6,-6c1.66,0 3.14,0.69 4.22,1.78L13,11h7V4l-2.35,2.35z\"/>\r\n</vector>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/baseline_refresh_24.xml b/app/src/main/res/drawable/baseline_refresh_24.xml
--- a/app/src/main/res/drawable/baseline_refresh_24.xml	(revision 07885d883bccddf9e12dcc4fa3c85fa81e440b1f)
+++ b/app/src/main/res/drawable/baseline_refresh_24.xml	(date 1697565217779)
@@ -1,4 +1,4 @@
-<vector android:height="24dp" android:tint="#000000"
+<vector android:height="24dp" android:tint="#9A000000"
     android:viewportHeight="24" android:viewportWidth="24"
     android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
     <path android:fillColor="@android:color/white" android:pathData="M17.65,6.35C16.2,4.9 14.21,4 12,4c-4.42,0 -7.99,3.58 -7.99,8s3.57,8 7.99,8c3.73,0 6.84,-2.55 7.73,-6h-2.08c-0.82,2.33 -3.04,4 -5.65,4 -3.31,0 -6,-2.69 -6,-6s2.69,-6 6,-6c1.66,0 3.14,0.69 4.22,1.78L13,11h7V4l-2.35,2.35z"/>
Index: app/src/main/java/com/example/avianwatch/fragments/ObservationListFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.avianwatch.fragments\r\n\r\nimport android.content.ContentValues\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.avianwatch.MainActivity\r\nimport com.example.avianwatch.R\r\nimport com.example.avianwatch.adapters.ObservationAdapter\r\nimport com.example.avianwatch.adapters.PostAdapter\r\nimport com.example.avianwatch.data.BirdObservation\r\nimport com.example.avianwatch.objects.Image\r\nimport com.example.avianwatch.data.ObservationItem\r\nimport com.example.avianwatch.data.Post\r\nimport com.example.avianwatch.databinding.FragmentObservationListBinding\r\nimport com.example.avianwatch.objects.FirebaseManager\r\nimport com.example.avianwatch.objects.Global\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Calendar\r\nimport java.util.Locale\r\n\r\n\r\nclass ObservationListFragment : Fragment(), ObservationAdapter.OnItemClickListener {\r\n    private lateinit var auth: FirebaseAuth\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        // Get the current date\r\n        val calendar = Calendar.getInstance()\r\n\r\n        // Format the date to display in your desired format (e.g., \"dd/MM/yyyy\")\r\n        val dateFormat = SimpleDateFormat(\"dd MMMM yyyy HH:mm\", Locale.getDefault())\r\n        val formattedDate = dateFormat.format(calendar.time)\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        val binding = FragmentObservationListBinding.inflate(inflater, container, false)\r\n        // go to the settings fragment\r\n        binding.ibAddObservation.setOnClickListener {\r\n            // Access the MainActivity and call the function to update the tool bar title\r\n            val mainActivity = activity as MainActivity\r\n            mainActivity.updateTitle(\"Add Observation\")\r\n\r\n            val fragmentTransaction = requireActivity().supportFragmentManager.beginTransaction()\r\n            val observationFragment = ObservationFragment()\r\n            fragmentTransaction.replace(R.id.fragment_container, observationFragment) // replace with the new fragment\r\n            fragmentTransaction.addToBackStack(null) //add to back stack\r\n            fragmentTransaction.commit()\r\n        }\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        val lstBirds = view.findViewById<RecyclerView>(R.id.rvObservationList)\r\n\r\n        // Set up the LinearLayoutManager for the RecyclerView\r\n        val plantLayoutManager = LinearLayoutManager(requireContext())\r\n        lstBirds.layoutManager = plantLayoutManager\r\n\r\n        auth = FirebaseAuth.getInstance()\r\n        val firebaseUser = auth.currentUser\r\n        val uid = firebaseUser?.uid\r\n\r\n        try{\r\n            // Create an instance of ObservationAdapter and pass the OnItemClickListener\r\n            if (uid != null) {\r\n                FirebaseManager.getObservations(uid) { observation ->\r\n                    // Update the global posts list\r\n                    Global.observations = observation\r\n\r\n                    try{\r\n                        val adapter = ObservationAdapter(Global.observations)\r\n                        adapter.setOnItemClickListener(this)\r\n                        // Set the adapter to the RecyclerView\r\n                        lstBirds.adapter = adapter\r\n                    }catch (e:Exception){\r\n                        Toast.makeText(requireContext(),e.message, Toast.LENGTH_SHORT).show()\r\n                        Log.d(ContentValues.TAG, e.message.toString())\r\n                    }\r\n                }\r\n            }\r\n\r\n        }catch (e:Exception){\r\n            Toast.makeText(activity,e.message,Toast.LENGTH_SHORT).show()\r\n            Log.d(ContentValues.TAG, e.message.toString())\r\n        }\r\n    }\r\n\r\n    override fun onItemClick(bird: BirdObservation) {\r\n        // Handle the click event and navigate to a different fragment\r\n        //Add data to bundle\r\n        val bundle = Bundle()\r\n        bundle.putString(\"bird_name\", bird.birdSpecies)\r\n        bundle.putString(\"date\", bird.dateTime.toString())\r\n        bundle.putString(\"location\", bird.hotspot.locName)\r\n        bundle.putString(\"notes\", bird.additionalNotes)\r\n        bundle.putString(\"imageData\", bird.birdImage)\r\n\r\n        try{\r\n            val fragment = ObservationListFragment()\r\n            fragment.arguments = bundle\r\n\r\n            //Navigate to fragment, passing bundle\r\n            //findNavController().navigate(R.id.action_ObservationListFragment_to_ViewPlantFragment, bundle)\r\n        }catch (e:Exception){\r\n            Toast.makeText(activity,e.message, Toast.LENGTH_SHORT).show()\r\n            Log.d(ContentValues.TAG, e.message.toString())\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/avianwatch/fragments/ObservationListFragment.kt b/app/src/main/java/com/example/avianwatch/fragments/ObservationListFragment.kt
--- a/app/src/main/java/com/example/avianwatch/fragments/ObservationListFragment.kt	(revision 07885d883bccddf9e12dcc4fa3c85fa81e440b1f)
+++ b/app/src/main/java/com/example/avianwatch/fragments/ObservationListFragment.kt	(date 1697561956195)
@@ -40,10 +40,6 @@
         // Format the date to display in your desired format (e.g., "dd/MM/yyyy")
         val dateFormat = SimpleDateFormat("dd MMMM yyyy HH:mm", Locale.getDefault())
         val formattedDate = dateFormat.format(calendar.time)
-
-
-
-
     }
 
     override fun onCreateView(
@@ -75,10 +71,7 @@
         // Set up the LinearLayoutManager for the RecyclerView
         val plantLayoutManager = LinearLayoutManager(requireContext())
         lstBirds.layoutManager = plantLayoutManager
-
-        auth = FirebaseAuth.getInstance()
-        val firebaseUser = auth.currentUser
-        val uid = firebaseUser?.uid
+        val uid = Global.currentUser?.uid.toString()
 
         try{
             // Create an instance of ObservationAdapter and pass the OnItemClickListener
Index: app/src/main/java/com/example/avianwatch/fragments/ObservationFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.avianwatch.fragments\r\n\r\nimport android.Manifest\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.location.Geocoder\r\nimport android.location.Location\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport com.example.avianwatch.data.BirdObservation\r\nimport com.example.avianwatch.data.Hotspot\r\nimport com.example.avianwatch.data.HotspotWithMarker\r\nimport com.example.avianwatch.databinding.FragmentObservationBinding\r\nimport com.example.avianwatch.objects.FirebaseManager\r\nimport com.example.avianwatch.objects.Global\r\nimport com.example.avianwatch.objects.Image\r\nimport com.github.dhaval2404.imagepicker.ImagePicker\r\nimport com.google.android.gms.location.FusedLocationProviderClient\r\nimport com.google.android.gms.location.LocationCallback\r\nimport com.google.android.gms.location.LocationRequest\r\nimport com.google.android.gms.location.LocationResult\r\nimport com.google.android.gms.location.LocationServices\r\nimport com.google.android.gms.maps.GoogleMap\r\nimport com.google.android.gms.maps.OnMapReadyCallback\r\nimport com.google.android.gms.maps.model.BitmapDescriptorFactory\r\nimport com.google.android.gms.maps.model.LatLng\r\nimport com.google.android.gms.maps.model.MarkerOptions\r\nimport java.io.IOException\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Calendar\r\nimport java.util.Locale\r\nimport java.util.UUID\r\nclass ObservationFragment : Fragment(), OnMapReadyCallback {\r\n    lateinit var binding: FragmentObservationBinding\r\n    private lateinit var locationCallback: LocationCallback\r\n    private lateinit var locationRequest: LocationRequest\r\n    private lateinit var fusedLocationClient: FusedLocationProviderClient\r\n    private lateinit var gMap: GoogleMap\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        // Inflate the layout for this fragment\r\n        binding = FragmentObservationBinding.inflate(inflater, container, false)\r\n\r\n        ActivityCompat.requestPermissions(\r\n            requireActivity(),\r\n            arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\r\n            REQUEST_LOCATION_PERMISSION\r\n        )\r\n\r\n        binding.btnCamera.setOnClickListener {\r\n            ImagePicker.with(this)\r\n                .crop()                     //crop image(optional), check customization for more options\r\n                .compress(1024)             //final image size will be less than 1 MB\r\n                .maxResultSize(1080,1080)   //final image resolution will be less than 1080 x 1080\r\n                .start()\r\n        }\r\n\r\n\r\n        binding.btnAddObservation.setOnClickListener {\r\n            addObservation(requireContext())\r\n        }\r\n\r\n        return binding.root\r\n    }\r\n\r\n    fun addBirdObservationOnMap(userObservation: BirdObservation) {\r\n        // Create location request\r\n        locationRequest = LocationRequest()\r\n        locationRequest.priority = LocationRequest.PRIORITY_HIGH_ACCURACY\r\n        locationRequest.interval = 10000 // Update location every 10 seconds\r\n\r\n        // Create location callback\r\n        locationCallback = object : LocationCallback() {\r\n            override fun onLocationResult(locationResult: LocationResult) {\r\n                super.onLocationResult(locationResult)\r\n                if (locationResult.lastLocation != null) {\r\n                    val location: Location = locationResult.lastLocation!!\r\n                    val latLng = LatLng(location.latitude, location.longitude)\r\n\r\n                    // Create a LatLng object for the observation location\r\n                    val observationLocation = LatLng(latLng.latitude, latLng.longitude)\r\n\r\n                    // Create a MarkerOptions object for the bird observation\r\n                    val markerOptions = MarkerOptions()\r\n                        .position(observationLocation)\r\n                        .title(userObservation.birdSpecies)\r\n                        .snippet(userObservation.additionalNotes)\r\n                        .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_GREEN))\r\n\r\n                    // Add the marker to the map\r\n                    val marker = gMap.addMarker(markerOptions)\r\n                    val hotspot_marker = HotspotWithMarker(\r\n                        userObservation.hotspot,\r\n                        marker\r\n                    )\r\n                    //store the user's hotspot with a marker\r\n                    Global.hotspotsWithMarker.add(hotspot_marker)\r\n                }else{\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun addObservation(context: Context) {\r\n        val imageData = Image.convertImageToBase64(binding.imgObservationImage).toString()\r\n\r\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())\r\n\r\n        // Check for location permission\r\n        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.ACCESS_FINE_LOCATION)\r\n            == PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            // Permission granted, create an observation\r\n            val oid = UUID.randomUUID().toString()\r\n            // Get the current date\r\n            val calendar = Calendar.getInstance()\r\n            // Format the date to display in your desired format (e.g., \"dd/MM/yyyy\")\r\n            val dateFormat = SimpleDateFormat(\"dd MMMM yyyy HH:mm\", Locale.getDefault())\r\n            val formattedDate = dateFormat.format(calendar.time)\r\n            fusedLocationClient.lastLocation\r\n                .addOnSuccessListener { location: Location? ->\r\n                    location?.let {\r\n                        val latLng = LatLng(location.latitude, location.longitude)\r\n                        val hotspot = Hotspot(\r\n                            UUID.randomUUID().toString(),\r\n                            getCityAndSuburbNameFromLatLng(latLng),\r\n                            binding.etBirdName.text.toString(),\r\n                            location.latitude,\r\n                            location.longitude\r\n                        )\r\n                        //store the user's hotspot\r\n                        Global.hotspots.add(hotspot)\r\n                        val observation = BirdObservation(\r\n                            Global.currentUser?.uid.toString(), //Store UID to create relationship\r\n                            oid,\r\n                            binding.etBirdName.text.toString(),\r\n                            binding.etNotes.text.toString(),\r\n                            imageData,\r\n                            formattedDate,\r\n                            hotspot\r\n                        )\r\n\r\n                        //Add observation to DB and update local storage\r\n                        FirebaseManager.addObservation(observation) { isSuccess -> //Use callback to wait for results\r\n                            if (isSuccess)\r\n                            {\r\n                                // add hotspot to map as a marker\r\n                                addBirdObservationOnMap(observation)\r\n                                //Update local observations list\r\n                                FirebaseManager.getObservations(Global.currentUser!!.uid.toString()) { observations ->\r\n                                    Global.observations = observations\r\n\r\n                                }\r\n                                Toast.makeText(context, \"Observation Created Successfully!\", Toast.LENGTH_SHORT).show()\r\n\r\n                            } else {\r\n                                Toast.makeText(context, \"Observation Creation Failed...\", Toast.LENGTH_LONG).show()\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n        } else {\r\n            // Request location permission\r\n            Toast.makeText(context, \"Observation creation failed...\", Toast.LENGTH_LONG).show()\r\n            ActivityCompat.requestPermissions(\r\n                requireActivity(),\r\n                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),\r\n                REQUEST_LOCATION_PERMISSION\r\n            )\r\n        }\r\n\r\n\r\n        if (binding.etBirdName.text.toString() == \"\") {\r\n            Toast.makeText(context, \"Enter the bird species...\", Toast.LENGTH_SHORT).show()\r\n            return\r\n        }\r\n        requireActivity().onBackPressed() // Navigate back to the previous screen\r\n    }\r\n\r\n\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n\r\n        if(requestCode == cameraRequestCode && resultCode == AppCompatActivity.RESULT_OK){\r\n            val imageBitmap = data?.extras?.get(\"data\") as Bitmap\r\n            binding.imgObservationImage.setImageBitmap(imageBitmap)\r\n        }else{\r\n            super.onActivityResult(requestCode, resultCode, data)\r\n        }\r\n        binding.imgObservationImage.setImageURI(data?.data)\r\n    }\r\n\r\n    private fun getCityAndSuburbNameFromLatLng(latLng: LatLng): String {\r\n        if (isAdded) {\r\n            val geocoder = Geocoder(requireContext(), Locale.getDefault())\r\n            try {\r\n                val addresses = geocoder.getFromLocation(latLng.latitude, latLng.longitude, 1)\r\n                if (!addresses.isNullOrEmpty()) {\r\n                    val address = addresses[0]\r\n                    val city = address.locality ?: \"Unknown City\"\r\n                    val suburb = address.subLocality ?: \"Unknown Suburb\"\r\n                    return \"$city, $suburb\"\r\n                }\r\n            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n            }\r\n        }\r\n        return \"Unknown\"\r\n    }\r\n\r\n\r\n    private fun checkCameraPermission() {\r\n        if (ContextCompat.checkSelfPermission(requireContext(), Manifest.permission.CAMERA)\r\n            != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            ActivityCompat.requestPermissions(\r\n                requireActivity(),\r\n                arrayOf(Manifest.permission.CAMERA),\r\n                CAMERA_PERMISSION_CODE\r\n            )\r\n        } else {\r\n            ImagePicker.with(this)\r\n                .crop()                     //crop image(optional), check customization for more options\r\n                .compress(1024)             //final image size will be less than 1 MB\r\n                .maxResultSize(1080,1080)   //final image resolution will be less than 1080 x 1080\r\n                .start()\r\n        }\r\n    }\r\n    companion object {\r\n        private const val CAMERA_PERMISSION_CODE = 100\r\n        private const val cameraRequestCode = 101\r\n        private const val REQUEST_LOCATION_PERMISSION = 123\r\n    }\r\n\r\n    override fun onMapReady(map: GoogleMap) {\r\n        gMap = map\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/avianwatch/fragments/ObservationFragment.kt b/app/src/main/java/com/example/avianwatch/fragments/ObservationFragment.kt
--- a/app/src/main/java/com/example/avianwatch/fragments/ObservationFragment.kt	(revision 07885d883bccddf9e12dcc4fa3c85fa81e440b1f)
+++ b/app/src/main/java/com/example/avianwatch/fragments/ObservationFragment.kt	(date 1697576147918)
@@ -8,6 +8,7 @@
 import android.location.Geocoder
 import android.location.Location
 import android.os.Bundle
+import android.util.Log
 import androidx.fragment.app.Fragment
 import android.view.LayoutInflater
 import android.view.View
@@ -34,11 +35,19 @@
 import com.google.android.gms.maps.model.BitmapDescriptorFactory
 import com.google.android.gms.maps.model.LatLng
 import com.google.android.gms.maps.model.MarkerOptions
+import org.json.JSONException
+import org.json.JSONObject
+import java.io.BufferedReader
 import java.io.IOException
+import java.io.InputStreamReader
+import java.net.HttpURLConnection
+import java.net.URL
 import java.text.SimpleDateFormat
 import java.util.Calendar
 import java.util.Locale
 import java.util.UUID
+import javax.net.ssl.HttpsURLConnection
+
 class ObservationFragment : Fragment(), OnMapReadyCallback {
     lateinit var binding: FragmentObservationBinding
     private lateinit var locationCallback: LocationCallback
@@ -140,7 +149,7 @@
                         val latLng = LatLng(location.latitude, location.longitude)
                         val hotspot = Hotspot(
                             UUID.randomUUID().toString(),
-                            getCityAndSuburbNameFromLatLng(latLng),
+                            getAddressName(location.latitude, location.longitude, Global.googleMapsApiKey).toString(),
                             binding.etBirdName.text.toString(),
                             location.latitude,
                             location.longitude
@@ -207,22 +216,45 @@
         binding.imgObservationImage.setImageURI(data?.data)
     }
 
-    private fun getCityAndSuburbNameFromLatLng(latLng: LatLng): String {
-        if (isAdded) {
-            val geocoder = Geocoder(requireContext(), Locale.getDefault())
-            try {
-                val addresses = geocoder.getFromLocation(latLng.latitude, latLng.longitude, 1)
-                if (!addresses.isNullOrEmpty()) {
-                    val address = addresses[0]
-                    val city = address.locality ?: "Unknown City"
-                    val suburb = address.subLocality ?: "Unknown Suburb"
-                    return "$city, $suburb"
+    // Function to perform reverse geocoding and get the address name
+    fun getAddressName(latitude: Double, longitude: Double, apiKey: String): String? {
+        val geocodingUrl = "https://maps.googleapis.com/maps/api/geocode/json?latlng=$latitude,$longitude&key=$apiKey"
+        var address: String? = null
+
+        try {
+            val url = URL(geocodingUrl)
+            val connection = url.openConnection() as HttpURLConnection
+            connection.requestMethod = "GET"
+            connection.connect()
+
+            if (connection.responseCode == HttpsURLConnection.HTTP_OK) {
+                val inputStream = connection.inputStream
+                val reader = BufferedReader(InputStreamReader(inputStream))
+                val response = StringBuilder()
+                var line: String?
+                while (reader.readLine().also { line = it } != null) {
+                    response.append(line)
                 }
-            } catch (e: IOException) {
-                e.printStackTrace()
-            }
+                inputStream.close()
+
+                // Parse the JSON response
+                val jsonResponse = JSONObject(response.toString())
+                val status = jsonResponse.getString("status")
+
+                if (status == "OK") {
+                    val results = jsonResponse.getJSONArray("results")
+                    if (results.length() > 0) {
+                        address = results.getJSONObject(0).getString("formatted_address")
+                    }
+                }
+            }
+            connection.disconnect()
+        } catch (e: IOException) {
+            Log.e("GeocodingError", "Error during geocoding: $e")
+        } catch (e: JSONException) {
+            Log.e("JsonError", "Error parsing JSON response: $e")
         }
-        return "Unknown"
+        return address
     }
 
 
Index: app/src/main/java/com/example/avianwatch/objects/Global.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.avianwatch.objects\r\n\r\nimport com.example.avianwatch.R\r\nimport com.example.avianwatch.data.BirdFact\r\nimport com.example.avianwatch.data.BirdObservation\r\nimport com.example.avianwatch.data.Hotspot\r\nimport com.example.avianwatch.data.HotspotWithMarker\r\nimport com.example.avianwatch.data.Post\r\nimport com.example.avianwatch.data.RouteData\r\nimport com.example.avianwatch.data.StepData\r\nimport com.example.avianwatch.data.User\r\nimport com.example.avianwatch.data.UserPreferences\r\nimport com.google.firebase.auth.FirebaseAuth\r\n\r\n//Singleton class for storing live data\r\nobject Global {\r\n    var currentUser: User? = null\r\n    var userPreferences: UserPreferences? = null\r\n    var hotspotsData: MutableList<Hotspot> = mutableListOf()\r\n    var routeData: RouteData? = null\r\n    var stepDataList: MutableList<StepData> = mutableListOf()\r\n    var users: MutableList<User> = mutableListOf()\r\n    var posts: MutableList<Post> = mutableListOf()\r\n    var observations: MutableList<BirdObservation> = mutableListOf()\r\n    var hotspots: MutableList<Hotspot> = mutableListOf()\r\n    var hotspotsWithMarker: MutableList<HotspotWithMarker> = mutableListOf()\r\n\r\n\r\n    //list of bird facts with corresponding image resource IDs\r\n    val birdFactsList = listOf(\r\n        BirdFact(\r\n            \"In the continental U.S. alone, between 1.4 billion and 3.7 billion birds are killed by cats annually.\",\r\n            R.mipmap.bird_predator\r\n        ),\r\n        BirdFact(\r\n            \"Though it looks like a bird’s knee is bending backwards, what is bending backward is actually its ankle. Below its ankle is an extended foot bone, leading to the toes. A bird’s real knee is usually hidden by feathers.\",\r\n            R.mipmap.bird_legs\r\n        ),\r\n        BirdFact(\r\n            \"Flamingos pair for a lifetime. Some stay with their mates for 50 years or more.\",\r\n            R.mipmap.flamingo_pair\r\n        ),\r\n        BirdFact(\r\n            \"The song of a European wren is made of more than 700 different notes a minute and can be heard 1,650 feet (500 m) away.\",\r\n            R.mipmap.wren_bird_song\r\n        ),\r\n        BirdFact(\r\n            \"The Sooty Tern spends more time in the air than any other bird. It takes off over the ocean and flies for at least 3 years without settling on water or land. Swifts also spend most of their lives in the air. They can even sleep in the air by gliding on air currents with their wings outstretched.\",\r\n            R.mipmap.sooty_tern_flight\r\n        ),\r\n        BirdFact(\r\n            \"A group of crows is called a murder or congress. A group of owls is called a parliament, wisdom, or study. A group of flamingos is called a flamboyance.\",\r\n            R.mipmap.group_of_crows\r\n        ),\r\n        BirdFact(\r\n            \"The Fieldfare birds have a special way to attack an enemy bird. They gang up on it and make it fly to the ground. Then the Fieldfares fly into the air and drop poop on the bird.\",\r\n            R.mipmap.fieldfare_poop\r\n        ),\r\n        BirdFact(\r\n            \"Vultures have stomach acid so corrosive that they can digest carcasses infected with anthrax.\",\r\n            R.mipmap.eating_vulture\r\n        ),\r\n        BirdFact(\r\n            \"The slowest flying bird is the American Woodcock. It can fly at just 5 mph (8 kph). When hummingbirds hover, they move at 0 mph. Additionally, hummingbirds are the only birds that can fly backwards under power, registering a negative speed.\",\r\n            R.mipmap.wood_cock\r\n        ),\r\n        BirdFact(\r\n            \"The fastest level flight by a bird has been seen in both the Spine-tailed Swift and the Red-breasted Merganser (a duck). They have flown at 100 mph (161 kph) in level flight.\",\r\n            R.mipmap.red_breasted_merganser\r\n        ),\r\n        BirdFact(\r\n            \"The heaviest bird in the air is the Kori Bustard, from East and South Africa. It weighs about 31 lb. (14 kg.), with the largest on recorded being 40 lb. (18 kg.). Because it is such hard work to fly, it flies only in emergencies and for only short distances.\",\r\n            R.mipmap.kori_bustard\r\n        ),\r\n        BirdFact(\r\n            \"The fastest flying bird in a dive is the Peregrine Falcon. It averages speeds of over 110 mph (180 kph).\",\r\n            R.mipmap.peregrine_falcon\r\n        )\r\n    )\r\n\r\n    //eBird API key\r\n    var eBirdApiKey = \"e7nbn16ihfum\"\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/avianwatch/objects/Global.kt b/app/src/main/java/com/example/avianwatch/objects/Global.kt
--- a/app/src/main/java/com/example/avianwatch/objects/Global.kt	(revision 07885d883bccddf9e12dcc4fa3c85fa81e440b1f)
+++ b/app/src/main/java/com/example/avianwatch/objects/Global.kt	(date 1697575894464)
@@ -80,4 +80,7 @@
 
     //eBird API key
     var eBirdApiKey = "e7nbn16ihfum"
+
+    //google maps API key
+    var googleMapsApiKey = "AIzaSyAv9rGpt3jZ3DlHL5JUdiXzG5QfQCcreFE"
 }
